
/*  Copyright 2014 Prateek Mathur
    
    Tic Tac Toe 3D is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Tic Tac Toe 3D is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Tic Tac Toe 3D. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Provides methods for UI and interaction with the tictactoe2D API.
 * 
 * @author Prateek Mathur
 */

/**
 * Status for an unfinished game
 */
var UNFINISHED = 0;

/**
 * Status for victory 
 */
var WON = 1;

/**
 * Status for loss
 */
var LOST = 2;

/**
 * Status for tie
 */
var TIE = 3;

/**
* Associate click event handler with all squares
*/
$(document).ready(function() {
	var squares = document.querySelectorAll('td');
	for (var i=0; i<squares.length; i++)	{
		var square = squares[i];
		square.addEventListener('click', clickHandler);
	}
});

/**
* Handler for the click event of all squares
* 
* @param e A MouseClick event generated by the square that was clicked upon
*/
var clickHandler = function(e)	{
	// Set the 'X' character on the square which is clicked
	var square = e.target;
	square.innerHTML = 'X';
	
	// Make sure that the square just clicked upon will not be clicked upon again
	square.removeEventListener('click', clickHandler);
	
	// Get the string of the board
	var boardString = getBoardString();
	
	// Check for victory
	var gameStatus = checkForVictory(boardString);
	
//	if (gameStatus == TIE)	{
//		// TODO
//		// Add a handleFinish() function that handles the post game scenario,
//		// and call it here.
//		console.log("That'a tie");
//	}
	if (gameStatus == UNFINISHED)	{
		console.log("It ain't over, my friend!!");
		
		// Construct the JSON-RPC request
		var request = gapi.client.tictactoe2D.compute2DMove({'state': boardString});
		
		// Execute the request, and update the board with the new board state
		request.execute(function (response)	{
			updateBoard(response.state);
			gameStatus = checkForVictory(response.state);
			
			if (gameStatus != UNFINISHED)	{
				handleFinish(gameStatus);
			}
		});
	}
	else	{
		handleFinish(gameStatus);
	}
};

/**
 * Get a string representation of the board
 */
function getBoardString()	{
	var board = [];
	
	var squares = document.querySelectorAll('td');
	for (var i=0; i<squares.length; i++)	{
		board.push(squares[i].innerHTML);
	}
	
	return board.join('');
}

/**
 * Fills the board with the updated board state
 * 
 * @param boardString String representation of current board
 */
function updateBoard(boardString)	{
	var squares = document.querySelectorAll('td');
	for (var i=0; i<squares.length; i++)	{
		var square = squares[i];
		square.innerHTML = boardString.charAt(i);
	}
}

/**
 * Checks for a victory condition
 * 
 * @param boardString String representation of current board
 */
function checkForVictory(boardString)	{
	var status = UNFINISHED;

	  // Checks rows and columns.
	  for (var i = 0; i < 3; i++) {
	    var rowString = getStringsAtPositions(boardString, i*3, (i*3)+1, (i*3)+2);
	    status |= checkSectionVictory(rowString);

	    var colString = getStringsAtPositions(boardString, i, i+3, i+6);
	    status |= checkSectionVictory(colString);
	  }

	  // Check top-left to bottom-right.
	  var diagonal = getStringsAtPositions(boardString, 0, 4, 8);
	  status |= checkSectionVictory(diagonal);

	  // Check top-right to bottom-left.
	  diagonal = getStringsAtPositions(boardString, 2, 4, 6);
	  status |= checkSectionVictory(diagonal);

	  if (status == UNFINISHED) {
	    if (boardString.indexOf('-') == -1) {
	      return TIE;
	    }
	  }

	  return status;
}

/**
 * Checks whether a set of three squares are identical.
 * 
 * @param {string} section Set of three squares to check.
 * @return {number} Status code for the victory state.
 */
function checkSectionVictory(section) {
	  var a = section.charAt(0);
	  var b = section.charAt(1);
	  var c = section.charAt(2);
	  if (a == b && a == c) {
	    if (a == 'X') {
	      return WON;
	    } else if (a == 'O') {
	      return LOST;
	    }
	  }
	  return UNFINISHED;
}

/**
 * Gets the values of the board at the given positions.
 * 
 * @param boardString Current state of the board.
 * @param first First element to retrieve.
 * @param second Second element to retrieve.
 * @param third Third element to retrieve.
 */
function getStringsAtPositions(boardString, first, second, third) {
	  return [boardString.charAt(first),
	          boardString.charAt(second),
	          boardString.charAt(third)].join('');
}

/**
 * Handles end of the game.
 * 
 * @param gameStatus Status of the game
 */
function handleFinish(gameStatus)	{
	if (gameStatus == WON)	{
		alert("You Won!!");
	}
	else if (gameStatus == LOST)	{
		alert("You Lost :(");
	}
	else	{
		alert("Game tied");
	}
}